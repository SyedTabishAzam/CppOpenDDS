// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p14
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// s:\opendds\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:152

#ifndef _TAO_IDL_COMMANDERTYPESUPPORTC_GXKCTG_H_
#define _TAO_IDL_COMMANDERTYPESUPPORTC_GXKCTG_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "dds/DCPS/ZeroCopySeq_T.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "CommanderC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DdsDcpsPublicationC.h"
#include "dds/DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsTopicC.h"
#include "dds/DdsDcpsTypeSupportExtC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:38

namespace Commander
{

  // TAO_IDL - Generated from
  // s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< Commander::Command, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> CommandSeq;
  

  // TAO_IDL - Generated from
  // s:\opendds\ace_wrappers\tao\tao_idl\be\be_interface.cpp:751

#if !defined (_COMMANDER_COMMANDTYPESUPPORT__VAR_OUT_CH_)
#define _COMMANDER_COMMANDTYPESUPPORT__VAR_OUT_CH_

  class CommandTypeSupport;
  typedef CommandTypeSupport *CommandTypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        CommandTypeSupport
      >
    CommandTypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        CommandTypeSupport
      >
    CommandTypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:43

  class  CommandTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // s:\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    typedef CommandTypeSupport_ptr _ptr_type;
    typedef CommandTypeSupport_var _var_type;
    typedef CommandTypeSupport_out _out_type;

    // The static operations.
    static CommandTypeSupport_ptr _duplicate (CommandTypeSupport_ptr obj);

    static void _tao_release (CommandTypeSupport_ptr obj);

    static CommandTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static CommandTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CommandTypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CommandTypeSupport (void);

    

    virtual ~CommandTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CommandTypeSupport (const CommandTypeSupport &);

    void operator= (const CommandTypeSupport &);
  };

  // TAO_IDL - Generated from
  // s:\opendds\ace_wrappers\tao\tao_idl\be\be_interface.cpp:751

#if !defined (_COMMANDER_COMMANDDATAWRITER__VAR_OUT_CH_)
#define _COMMANDER_COMMANDDATAWRITER__VAR_OUT_CH_

  class CommandDataWriter;
  typedef CommandDataWriter *CommandDataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        CommandDataWriter
      >
    CommandDataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        CommandDataWriter
      >
    CommandDataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:43

  class  CommandDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // s:\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    typedef CommandDataWriter_ptr _ptr_type;
    typedef CommandDataWriter_var _var_type;
    typedef CommandDataWriter_out _out_type;

    // The static operations.
    static CommandDataWriter_ptr _duplicate (CommandDataWriter_ptr obj);

    static void _tao_release (CommandDataWriter_ptr obj);

    static CommandDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static CommandDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CommandDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::Commander::Command & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::Commander::Command & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::Commander::Command & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::Commander::Command & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::Commander::Command & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::Commander::Command & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::Commander::Command & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::Commander::Command & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::Commander::Command & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::Commander::Command & instance_data) = 0;

    // TAO_IDL - Generated from
    // s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CommandDataWriter (void);

    

    virtual ~CommandDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CommandDataWriter (const CommandDataWriter &);

    void operator= (const CommandDataWriter &);
  };

  // TAO_IDL - Generated from
  // s:\opendds\ace_wrappers\tao\tao_idl\be\be_interface.cpp:751

#if !defined (_COMMANDER_COMMANDDATAREADER__VAR_OUT_CH_)
#define _COMMANDER_COMMANDDATAREADER__VAR_OUT_CH_

  class CommandDataReader;
  typedef CommandDataReader *CommandDataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        CommandDataReader
      >
    CommandDataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        CommandDataReader
      >
    CommandDataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:43

  class  CommandDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // s:\opendds\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    typedef CommandDataReader_ptr _ptr_type;
    typedef CommandDataReader_var _var_type;
    typedef CommandDataReader_out _out_type;

    // The static operations.
    static CommandDataReader_ptr _duplicate (CommandDataReader_ptr obj);

    static void _tao_release (CommandDataReader_ptr obj);

    static CommandDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static CommandDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CommandDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::Commander::CommandSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::Commander::CommandSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::Commander::CommandSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::Commander::CommandSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::Commander::Command & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::Commander::Command & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::Commander::CommandSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::Commander::CommandSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::Commander::CommandSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::Commander::CommandSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::Commander::CommandSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::Commander::CommandSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::Commander::CommandSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::Commander::CommandSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::Commander::CommandSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::Commander::Command & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::Commander::Command & instance_data) = 0;

    // TAO_IDL - Generated from
    // s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CommandDataReader (void);

    

    virtual ~CommandDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CommandDataReader (const CommandDataReader &);

    void operator= (const CommandDataReader &);
  };

// TAO_IDL - Generated from
// s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:67

} // module Commander

// TAO_IDL - Generated from
// s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// s:\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COMMANDER_COMMANDTYPESUPPORT__TRAITS_)
#define _COMMANDER_COMMANDTYPESUPPORT__TRAITS_

  template<>
  struct  Objref_Traits< ::Commander::CommandTypeSupport>
  {
    static ::Commander::CommandTypeSupport_ptr duplicate (
        ::Commander::CommandTypeSupport_ptr p);
    static void release (
        ::Commander::CommandTypeSupport_ptr p);
    static ::Commander::CommandTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Commander::CommandTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COMMANDER_COMMANDDATAWRITER__TRAITS_)
#define _COMMANDER_COMMANDDATAWRITER__TRAITS_

  template<>
  struct  Objref_Traits< ::Commander::CommandDataWriter>
  {
    static ::Commander::CommandDataWriter_ptr duplicate (
        ::Commander::CommandDataWriter_ptr p);
    static void release (
        ::Commander::CommandDataWriter_ptr p);
    static ::Commander::CommandDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Commander::CommandDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COMMANDER_COMMANDDATAREADER__TRAITS_)
#define _COMMANDER_COMMANDDATAREADER__TRAITS_

  template<>
  struct  Objref_Traits< ::Commander::CommandDataReader>
  {
    static ::Commander::CommandDataReader_ptr duplicate (
        ::Commander::CommandDataReader_ptr p);
    static void release (
        ::Commander::CommandDataReader_ptr p);
    static ::Commander::CommandDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Commander::CommandDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// s:\opendds\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "CommanderTypeSupportC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

